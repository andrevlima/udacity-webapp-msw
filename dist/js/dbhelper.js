class DBHelper{constructor(){tryToPollyfill(),bindAlertWhenOffOrOn(),this.isFirstCacheDone=!1,window.isNot=(e=>!e)}static bindAlertWhenOffOrOn(){let e=()=>{var e=navigator.onLine?"online":"offline";Helper.showAlert(`Now, you are ${e}!`)};const t=()=>{DBHelper.resendPendingReviews(),DBHelper.resendPendingFavorites()};window.addEventListener("online",()=>{e(),t()}),window.addEventListener("offline",e),document.addEventListener("DOMContentLoaded",()=>{setTimeout(t,2e3)})}static fetchRestaurantsFromServer(e){return new Promise((t,r)=>{let n=new XMLHttpRequest;e?n.open("GET",`${DBHelper.DATABASE_URL}/${e}`):n.open("GET",`${DBHelper.DATABASE_URL}/`),n.onload=(()=>{if(200===n.status){const e=JSON.parse(n.responseText);t({response:e})}else{n.status;n.onerror()}}),n.onerror=function(){r({status:this.status,statusText:n.statusText})},n.send()})}static sendReview(e){return fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e)}).then(e=>{if(!e.ok)throw e;return e}).catch(t=>{throw idb.open("db-pending",1,e=>{e.createObjectStore("review",{autoIncrement:!0,keyPath:"cache_id"})}).then(t=>{const r=t._db.transaction(["review"],"readwrite");return r.objectStore("review").add(e),r}),t})}static getPendingFavoriteDB(){return idb.open("db-pending-favorites",1,e=>(e.createObjectStore("favorites",{keyPath:"id"}),e))}static resendPendingFavorites(){let e=this;return this.getPendingFavoriteDB().then(t=>{const r=t._db.transaction(["favorites"],"readwrite").objectStore("favorites");return new Promise(t=>{r.getAll().onsuccess=function(t){[].concat(t.target.result).forEach(t=>{let r=t.id;e.sendFavorite(t).then(()=>{e.removePendingReview(r)})})}})})}static sendFavorite(e){const t=this;return fetch(`http://localhost:1337/restaurants/${e.id}/?is_favorite=${e.is_favorite}`,{method:"PUT",headers:{"Content-Type":"application/json"},mode:"cors"}).then(r=>{if(!r.ok)throw r;return t.removePendingFavorite(e.id),r}).catch(r=>{throw t.setPendingFavorites(e),r})}static removePendingFavorite(e){return this.getPendingFavoriteDB().then(t=>{const r=t._db.transaction(["favorites"],"readwrite");return r.objectStore("favorites").delete(e),r})}static setPendingFavorites(e){return this.getPendingFavoriteDB().then(t=>{const r=t._db.transaction(["favorites"],"readwrite").objectStore("favorites");return new Promise(t=>{r.put(e).onsuccess=function(e){t()}})})}static resendPendingReviews(){let e=this;idb.open("db-pending",1,e=>{e.createObjectStore("review",{autoIncrement:!0,keyPath:"cache_id"})}).then(t=>{const r=t._db.transaction(["review"],"readwrite");return r.objectStore("review").getAll().onsuccess=function(t){[].concat(t.target.result).forEach(t=>{let r=t.cache_id;e.sendReview(t).then(()=>{e.removePendingReview(r)})})},r})}static removePendingReview(e){return idb.open("db-pending",1,e=>{e.createObjectStore("review",{autoIncrement:!0,keyPath:"cache_id"})}).then(t=>{const r=t._db.transaction(["review"],"readwrite");return r.objectStore("review").delete(e),r})}static fetchPedingReviews(e){return idb.open("db-pending",1,e=>{e.createObjectStore("review",{autoIncrement:!0,keyPath:"cache_id"})}).then(t=>{const r=t._db.transaction(["review"],"readwrite").objectStore("review");return new Promise(function(t,n){r.getAll().onsuccess=function(r){let n=r.target.result.filter(t=>t.restaurant_id==e);t(n)}})})}static getDB(){return idb.open("db-restaurant",1,e=>{switch(e.oldVersion){case 1:e.createObjectStore("restaurants",{keyPath:"id"});case 2:e.createObjectStore("reviews_restaurant",{keyPath:"restaurant_id"})}return e})}static getDataPromised(e){let t,r,n=e;if(this.isFirstCacheDone)return(t=this.getDB()).then(e=>{const t=e._db.transaction("restaurants");return new Promise((e,r)=>{n?t.objectStore("restaurants").get(n).onsuccess=function(t){e([t.target.result])}:t.objectStore("restaurants").getAll().onsuccess=function(t){e(t.target.result)}})});let i=!1;return this.fetchRestaurantsFromServer(n).then(function(e){return r=e.response,idb.open("db-restaurant",1,e=>(e.createObjectStore("restaurants",{keyPath:"id"}),e))}).catch(()=>(this.isFirstCacheDone=!0,i=!0,console.warn("Retrieving from cached DB..."),this.getDataPromised())).then(e=>{if(i)return e;var t=e._db,n=[].concat(r).map(e=>new Promise((r,n)=>{const i=t.transaction(["restaurants"],"readwrite");return i.oncomplete=(()=>r(e)),i.onerror=(()=>r(e)),i.objectStore("restaurants").put(e),e}));return this.isFirstCacheDone=!0,Promise.all(n)})}static tryToPollyfill(){window.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB}static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){this.getDataPromised().then(t=>{e(null,t)})}static fetchRestaurantById(e,t){this.getDataPromised(e).then(e=>{t(e[0])})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,i)=>{if(n)r(n,null);else{let n=i;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static imageUrlForRestaurant(e,t){t(`/dist/img/${e.photograph?e.photograph:e.id}.webp`)}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:`./restaurant.html?id=${e.id}`,map:t,animation:google.maps.Animation.DROP})}static markAsFavorite(e,t){return this.sendFavorite({id:e,is_favorite:t}).catch(()=>new Promise(r=>{const n=r;this.fetchRestaurantById(e,e=>{e=e;this.getDB().then(r=>{let i=null;const s=(i=r._db).transaction(["restaurants"],"readwrite");return e.is_favorite=t,new Promise((t,r)=>{s.objectStore("restaurants").put(e).onsuccess=function(r){t(r.target.result),n(e)}})})})}))}}